heat_template_version: 2013-05-23

description: Salt master fragment

parameters:

  public_net:
    type: string
  admin_net:
    type: string
  private_net:
    type: string

  security_group:
    type: string
  key_pair:
    type: string
  key_private:
    type: string
    hidden: true

  instance_os:
    type: string
  instance_flavor:
    type: string
  instance_image:
    type: string
  instance_zone:
    type: string

  reclass_address:
    type: string
  reclass_branch:
    type: string
  reclass_private_key:
    type: string
    hidden: true
    default: ""

  formula_branch:
    type: string

  instance_name:
    type: string
  instance_address:
    type: string
    default: 172.16.10.100

resources:
  cfg01_wait_handle:
    type: OS::Heat::WaitConditionHandle
  cfg01_wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: cfg01_wait_handle}
      timeout: 3600
  cfg01_floating_ip:
    type: OS::Nova::FloatingIP
    properties: 
      pool: { get_param: public_net }
  cfg01_floating_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: cfg01_floating_ip }
      server_id: { get_resource: cfg01_instance }
  cfg01_private_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net }
      fixed_ips:
        - ip_address: { get_param: instance_address }
      security_groups:
        - default
        - { get_param: security_group }
  cfg01_admin_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: admin_net }
      fixed_ips:
        - ip_address: 192.168.10.100
      security_groups:
        - default
        - { get_param: security_group }
  cfg01_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: instance_image }
      # This allows to use heat stack-update
      image_update_policy: REBUILD
      flavor: { get_param: instance_flavor }
      key_name: { get_param: key_pair }
      name: { get_param: instance_name }
      availability_zone: { get_param: instance_zone }
      networks:
      - port: { get_resource: cfg01_private_port }
      - port: { get_resource: cfg01_admin_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            # Redirect all outputs
            exec > >(tee -i /tmp/mk-bootstrap.log) 2>&1
            set -x
            echo "Preparing base OS ..."

            which wget >/dev/null || (apt-get update; apt-get install -y wget)

            echo "deb [arch=amd64] http://apt-mk.mirantis.com/xenial/ nightly" > /etc/apt/sources.list
            wget -O - http://apt-mk.mirantis.com/public.gpg | apt-key add -
            echo "deb http://repo.saltstack.com/apt/ubuntu/16.04/amd64/2016.3 xenial main" > /etc/apt/sources.list.d/saltstack.list
            wget -O - https://repo.saltstack.com/apt/ubuntu/16.04/amd64/2016.3/SALTSTACK-GPG-KEY.pub | apt-key add -

            apt-get clean
            apt-get update

            echo "Installing salt master ..."
            apt-get install -y reclass
            apt-get install -y salt-master

            [ ! -d /root/.ssh ] && mkdir -p /root/.ssh
            cat << 'EOF' > /root/.ssh/id_rsa
            $key_private
            EOF
            chmod 400 /root/.ssh/id_rsa

            # Setup the private key for cloning the reclass model (optional)
            if [[ "$reclass_private_key" != "" ]]; then
                cat << 'EOF' > /root/.ssh/reclass_key
            $reclass_private_key
            EOF
                chmod 400 /root/.ssh/reclass_key
                cat << 'EOF' >> /root/.ssh/config
            Host github.com
            IdentityFile /root/.ssh/reclass_key
            IdentitiesOnly yes
            EOF
            fi

            cat << 'EOF' > /etc/salt/master.d/master.conf
            file_roots:
              base:
              - /usr/share/salt-formulas/env
            pillar_opts: False
            open_mode: True
            reclass: &reclass
              storage_type: yaml_fs
              inventory_base_uri: /srv/salt/reclass
            ext_pillar:
              - reclass: *reclass
            master_tops:
              reclass: *reclass
            EOF

            echo "Configuring reclass ..."
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            git clone -b $reclass_branch --recurse-submodules $reclass_address /srv/salt/reclass
            mkdir -p /srv/salt/reclass/classes/service

            FORMULA_PATH=${FORMULA_PATH:-/usr/share/salt-formulas}
            FORMULA_BRANCH=${FORMULA_BRANCH:-$formula_branch}

            echo "Configuring salt master formulas ..."

            [ ! -d /srv/salt/reclass/classes/service ] && mkdir -p /srv/salt/reclass/classes/service

            declare -a formula_services=("linux" "reclass" "salt" "openssh" "ntp" "git" "nginx" "collectd" "sensu" "heka" "sphinx" "keystone" "mysql" "grafana" "haproxy" "rsyslog" "horizon")

            for formula_service in "${formula_services[@]}"; do
                echo -e "\nConfiguring salt formula ${formula_service} ...\n"
                if [[ ! -d "${FORMULA_PATH}/env/_formulas/${formula_service}" ]]; then
                    _URL=https://github.com/salt-formulas/salt-formula-${formula_service}.git
                    _BRANCH=$FORMULA_BRANCH
                    if ! git ls-remote --exit-code --heads $_URL $_BRANCH; then
                        # Fallback to the master branch if the branch doesn't exist for this repository
                        _BRANCH=master
                    fi
                    git clone $_URL ${FORMULA_PATH}/env/_formulas/${formula_service} -b $_BRANCH
                fi
                [ ! -L "/usr/share/salt-formulas/env/${formula_service}" ] && \
                    ln -s ${FORMULA_PATH}/env/_formulas/${formula_service}/${formula_service} /usr/share/salt-formulas/env/${formula_service}
                [ ! -L "/srv/salt/reclass/classes/service/${formula_service}" ] && \
                    ln -s ${FORMULA_PATH}/env/_formulas/${formula_service}/metadata/service /srv/salt/reclass/classes/service/${formula_service}
            done

            [ ! -d /srv/salt/env ] && mkdir -p /srv/salt/env
            [ ! -L /srv/salt/env/dev ] && ln -s /usr/share/salt-formulas/env /srv/salt/env/dev

            [ ! -d /etc/reclass ] && mkdir /etc/reclass
            cat << 'EOF' > /etc/reclass/reclass-config.yml
            storage_type: yaml_fs
            pretty_print: True
            output: yaml
            inventory_base_uri: /srv/salt/reclass
            EOF

            echo "Configuring salt minion ..."
            [ ! -d /etc/salt/minion.d ] && mkdir -p /etc/salt/minion.d
            cat << "EOF" > /etc/salt/minion.d/minion.conf
            id: $node_name
            master: 127.0.0.1
            EOF
            apt-get install -y salt-minion

            echo "Restarting services ..."
            systemctl restart salt-master
            systemctl restart salt-minion

            echo "Showing system info and metadata ..."
            salt-call --no-color grains.items
            salt-call --no-color pillar.data

            echo "Running complete state ..."
            salt-call --no-color state.sls linux,openssh -l info
            salt-call --no-color state.sls reclass -l info
            salt-call --no-color state.sls salt.master.service -l info
            salt-call --no-color state.sls salt.master,salt.api,salt.minion.ca -l info
            # There is an issue where the PEM is not send to mine. Until we find
            # why it is not working we can send it manually.
            CERT_PATH="/etc/pki/ca/mk_lab_ca/ca.crt"
            [ -f ${CERT_PATH} ] && \
                salt-call mine.send x509.get_pem_entries "/etc/pki/ca/mk_lab_ca/ca.crt" || \
                echo "${CERT_PATH} not found"
            systemctl restart salt-minion
            $wait_condition_notify --data-binary '{"status": "SUCCESS"}'

            reclass-salt --top
            salt-call --no-color state.sls salt.minion.cert -l info
          params:
            $key_private: { get_param: key_private }
            $node_name: { get_param: instance_name }
            $reclass_address: { get_param: reclass_address }
            $reclass_branch: { get_param: reclass_branch }
            $reclass_private_key: { get_param: reclass_private_key }
            $formula_branch: { get_param: formula_branch }
            $wait_condition_notify: { get_attr: [cfg01_wait_handle, curl_cli] }
            $config_host: localhost

outputs:
  config_host:
    value: { get_attr: [cfg01_instance, first_address] }
    description: "Private IP address of the Salt master node"
  config_public:
    value: { get_attr: [cfg01_floating_ip, ip] }
    description: "Public IP address of the Salt master node"
